# syntax=docker/dockerfile:1.4
# Build stage
FROM node:18-bullseye as builder

WORKDIR /app

# Install Rust and wasm-pack - these rarely change
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Rust - this rarely changes
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Install wasm-pack - this rarely changes
RUN curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

# Copy package files first - these change less frequently than source code
COPY ts/package.json ts/package-lock.json ts/tsconfig.json ts/
COPY Cargo.toml Cargo.lock rust-toolchain ./

# Install npm dependencies - this will be cached if package files don't change
RUN cd ts && \
    # First try: Use package-lock.json (normal install)
    (npm ci || \
    # Second try: If npm ci fails, try regular install
    npm install || \
    # Third try: If regular install fails, try with --no-package-lock
    npm install --no-package-lock)

# Now copy the source code - this changes most frequently
COPY src/ src/
COPY ts/src/ ts/src/
COPY Makefile ./

# Create build artifacts directory for CI/CD pipeline
RUN mkdir -p build-artifacts && cd ts && npx tsc

# Add ARG for fallback
ARG USER_ADDRESS=""
ARG CHAIN_ID="11155111"
ARG CREATOR_ONLY_ADD_PROVE_TASK="true"

# Install zkwasm-service-cli for publishing
RUN cd ts && npm install zkwasm-service-cli --no-audit --no-fund --no-optional --no-package-lock --no-save --ignore-scripts --force

# Build WASM files and publish to zkwasmhub in a single step
RUN --mount=type=secret,id=SERVER_ADMIN_KEY \
    --mount=type=secret,id=SETTLER_PRIVATE_ACCOUNT \
    --mount=type=secret,id=USER_ADDRESS \
    echo "Checking for secrets directory..." && \
    ls -la /run/secrets/ || echo "No secrets directory found" && \
    echo "Attempting to read secrets..." && \
    export SERVER_ADMIN_KEY=$(cat /run/secrets/SERVER_ADMIN_KEY 2>/dev/null || echo "default_key") && \
    export USER_PRIVATE_ACCOUNT=$(cat /run/secrets/SETTLER_PRIVATE_ACCOUNT 2>/dev/null || echo "default_account") && \
    export USER_ADDRESS=$(cat /run/secrets/USER_ADDRESS 2>/dev/null || echo "${USER_ADDRESS:-default_address}") && \
    echo "Using USER_ADDRESS: $USER_ADDRESS" && \
    # Build WASM files
    (make build || \
     (echo "Make build failed, trying direct wasm-pack build..." && \
      cd src && wasm-pack build --release --out-name application --out-dir ../pkg && \
      mkdir -p ../ts/node_modules/zkwasm-ts-server/src/application/ && \
      cp ../pkg/application_bg.wasm ../ts/node_modules/zkwasm-ts-server/src/application/)) && \
    # Generate MD5 and copy WASM file to build-artifacts
    if [ -f "./ts/node_modules/zkwasm-ts-server/src/application/application_bg.wasm" ]; then \
      md5sum ./ts/node_modules/zkwasm-ts-server/src/application/application_bg.wasm | \
      awk '{print toupper($1)}' > build-artifacts/wasm.md5 && \
      cp ./ts/node_modules/zkwasm-ts-server/src/application/application_bg.wasm build-artifacts/ && \
      # Publish WASM image if secrets are available
      if [ -n "$(cat /run/secrets/USER_ADDRESS 2>/dev/null)" ] && [ -n "$(cat /run/secrets/SETTLER_PRIVATE_ACCOUNT 2>/dev/null)" ]; then \
        echo "Publishing WASM image to zkwasmhub..." && \
        cd ts && \
        # Create .env file with required variables
        echo "USER_ADDRESS=\"$USER_ADDRESS\"" > .env && \
        echo "USER_PRIVATE_ACCOUNT=\"$USER_PRIVATE_ACCOUNT\"" >> .env && \
        echo "SETTLER_PRIVATE_ACCOUNT=\"$USER_PRIVATE_ACCOUNT\"" >> .env && \
        echo "CHAIN_ID=\"${CHAIN_ID}\"" >> .env && \
        echo "CHART_NAME=\"zkwasm-exchange\"" >> .env && \
        echo "CREATOR_ONLY_ADD_PROVE_TASK=\"${CREATOR_ONLY_ADD_PROVE_TASK}\"" >> .env && \
        # Make the publish script executable and run it
        chmod +x publish.sh && \
        # Run the publish script with npm integrity checks disabled
        NODE_OPTIONS="--preserve-symlinks --no-warnings --no-deprecation" \
        npm_config_legacy_peer_deps=true \
        npm_config_package_lock=false \
        npm_config_audit=false \
        npm_config_fund=false \
        npm_config_update_notifier=false \
        npm_config_strict_ssl=false \
        ./publish.sh || echo "WASM publishing failed, but continuing build"; \
      else \
        echo "Skipping WASM publishing due to missing secrets"; \
      fi; \
    else \
      echo "WASM file not found, skipping publishing"; \
    fi

# Production stage
FROM node:18-slim

# 设置非敏感环境变量
ENV NODE_ENV="production"

WORKDIR /app

# Copy only necessary files from builder
COPY --from=builder /app/ts ./ts
COPY --from=builder /app/src/admin.pubkey ./src/admin.pubkey
COPY --from=builder /app/build-artifacts ./build-artifacts

# Create user first
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Switch to non-root user
USER appuser

EXPOSE 3000
CMD ["node", "./ts/src/service.js"]
