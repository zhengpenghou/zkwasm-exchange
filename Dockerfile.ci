# syntax=docker/dockerfile:1.4
# Build stage
FROM node:18-bullseye as builder

WORKDIR /app

# Install Rust and wasm-pack - these rarely change (combined into one layer)
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    pkg-config \
    libssl-dev \
    binaryen \
    && rm -rf /var/lib/apt/lists/* \
    && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    && curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

ENV PATH="/root/.cargo/bin:${PATH}"

# Copy package files first - these change less frequently than source code
COPY ts/package.json ts/package-lock.json ts/tsconfig.json ts/
COPY Cargo.toml Cargo.lock rust-toolchain ./

# Install npm dependencies with optimizations for CI
RUN cd ts && \
    npm config set fetch-retries 5 && \
    npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    # Use npm ci with optimizations
    (npm ci --no-audit --no-fund --prefer-offline --no-optional || \
    # Fallback to regular install
    npm install --no-audit --no-fund --prefer-offline --no-optional || \
    # Last resort
    npm install --no-package-lock --no-audit --no-fund)

# Now copy the source code - this changes most frequently
COPY src/ src/
COPY ts/src/ ts/src/
COPY ts/publish.sh ts/publish.sh
COPY ts/clean_env.sh ts/clean_env.sh
COPY Makefile ./

# Create build artifacts directory for CI/CD pipeline
RUN mkdir -p build-artifacts && cd ts && npx tsc

# Add ARG for fallback
ARG USER_ADDRESS=""
ARG CHAIN_ID="11155111"
ARG CREATOR_ONLY_ADD_PROVE_TASK="true"

# Install zkwasm-service-cli for publishing
RUN cd ts && npm install zkwasm-service-cli --no-audit --no-fund --no-optional --no-package-lock --no-save --ignore-scripts --force

# Build WASM files - optimized for faster build
RUN --mount=type=secret,id=SERVER_ADMIN_KEY \
    --mount=type=secret,id=SETTLER_PRIVATE_ACCOUNT \
    --mount=type=secret,id=USER_ADDRESS \
    echo "Checking for secrets directory..." && \
    ls -la /run/secrets/ || echo "No secrets directory found" && \
    echo "Attempting to read secrets..." && \
    export SERVER_ADMIN_KEY=$(cat /run/secrets/SERVER_ADMIN_KEY 2>/dev/null || echo "default_key") && \
    export USER_PRIVATE_ACCOUNT=$(cat /run/secrets/SETTLER_PRIVATE_ACCOUNT 2>/dev/null | tr -d '\n\r' || echo "default_account") && \
    export USER_ADDRESS=$(cat /run/secrets/USER_ADDRESS 2>/dev/null | tr -d '\n\r' || echo "${USER_ADDRESS:-default_address}") && \
    echo "Using USER_ADDRESS: $USER_ADDRESS" && \
    # Build WASM files with optimized settings
    (RUSTFLAGS="-C target-cpu=native -C codegen-units=1 -C opt-level=3" make build || \
     (echo "Make build failed, trying direct wasm-pack build..." && \
      cd src && RUSTFLAGS="-C target-cpu=native -C codegen-units=1 -C opt-level=3" wasm-pack build --release --out-name application --out-dir ../pkg && \
      mkdir -p ../ts/node_modules/zkwasm-ts-server/src/application/ && \
      cp ../pkg/application_bg.wasm ../ts/node_modules/zkwasm-ts-server/src/application/)) && \
    # Generate MD5 and copy WASM file to build-artifacts
    if [ -f "./ts/node_modules/zkwasm-ts-server/src/application/application_bg.wasm" ]; then \
      md5sum ./ts/node_modules/zkwasm-ts-server/src/application/application_bg.wasm | \
      awk '{print toupper($1)}' > build-artifacts/wasm.md5 && \
      cp ./ts/node_modules/zkwasm-ts-server/src/application/application_bg.wasm build-artifacts/ && \
      # Publish WASM image if secrets are available - only if not in CI mode
      if [ "${CI:-false}" != "true" ] && [ -n "$(cat /run/secrets/USER_ADDRESS 2>/dev/null)" ] && [ -n "$(cat /run/secrets/SETTLER_PRIVATE_ACCOUNT 2>/dev/null)" ]; then \
        echo "Publishing WASM image to zkwasmhub..." && \
        cd ts && \
        # Create .env file with clean variables (simplified)
        cat > .env << 'EOF'
USER_ADDRESS="$(cat /run/secrets/USER_ADDRESS 2>/dev/null | tr -d '\n\r' || echo "${USER_ADDRESS:-default_address}")"
USER_PRIVATE_ACCOUNT="$(cat /run/secrets/SETTLER_PRIVATE_ACCOUNT 2>/dev/null | tr -d '\n\r' || echo "default_account")"
SETTLER_PRIVATE_ACCOUNT="$(cat /run/secrets/SETTLER_PRIVATE_ACCOUNT 2>/dev/null | tr -d '\n\r' || echo "default_account")"
CHAIN_ID="${CHAIN_ID}"
CHART_NAME="zkwasm-exchange"
CREATOR_ONLY_ADD_PROVE_TASK="${CREATOR_ONLY_ADD_PROVE_TASK}"
EOF
        
        # Make the publish script executable and run it with optimized settings
        chmod +x ./publish.sh && \
        NODE_OPTIONS="--max-old-space-size=4096 --preserve-symlinks --no-warnings --no-deprecation" \
        npm_config_legacy_peer_deps=true \
        npm_config_package_lock=false \
        npm_config_audit=false \
        npm_config_fund=false \
        npm_config_update_notifier=false \
        npm_config_strict_ssl=false \
        ./publish.sh || echo "WASM publishing failed, but continuing build"; \
      else \
        echo "Skipping WASM publishing due to missing secrets or CI mode"; \
      fi; \
    else \
      echo "WASM file not found, skipping publishing"; \
    fi

# Production stage
FROM node:18-slim

# 设置非敏感环境变量
ENV NODE_ENV="production"

WORKDIR /app

# Copy only necessary files from builder
COPY --from=builder /app/ts ./ts
COPY --from=builder /app/src/admin.pubkey ./src/admin.pubkey
COPY --from=builder /app/build-artifacts ./build-artifacts

# Create user first
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Switch to non-root user
USER appuser

EXPOSE 3000
CMD ["node", "./ts/src/service.js"]
